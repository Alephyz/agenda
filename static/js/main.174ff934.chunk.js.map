{"version":3,"sources":["components/Formulario.jsx","components/Contacto.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","agregarContacto","contactoSeleccionado","editarContacto","useState","nombre","apellido","email","telefono","contacto","actualizarContacto","actualizarError","editando","actualizarEditando","actualizarState","e","target","name","value","useEffect","id","className","onSubmit","preventDefault","trim","swal","title","text","icon","button","contactoTemporal","uuidv4","type","required","onChange","placeholder","htmlFor","pattern","data-error","minLength","maxLength","Contacto","eliminarContacto","seleccionarContacto","onClick","App","contactosStorage","JSON","parse","localStorage","getItem","contactos","actualizarContactos","actualizarContactoSeleccionado","filter","setItem","stringify","contactoeditado","contactosAntes","map","push","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.174ff934.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// Libreria para las alertas\r\nimport swal from \"sweetalert\";\r\n// Libreria que genera un id unico\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction Formulario({ agregarContacto, contactoSeleccionado, editarContacto }) {\r\n  // Se crea el state para el contacto\r\n  const [contacto, actualizarContacto] = useState({\r\n    nombre: '',\r\n    apellido: '',\r\n    email: '',\r\n    telefono: '',\r\n  });\r\n  // Creo el state para saber si el formulario cuenta con algun error\r\n  const [error, actualizarError] = useState(false);\r\n  // Creo el state para saber si esta actualizando o no\r\n  const [editando, actualizarEditando] = useState(false);\r\n  // Funcion que actualiza el valor de cada propiedad del state contacto\r\n  const actualizarState = (e) => {\r\n    // Actualizo el campo correspondiente mediante el hook\r\n    actualizarContacto({\r\n      ...contacto,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // Destrucutro las propiedades de cntacto para usarlas mas facilmente\r\n  const { nombre, apellido, email, telefono } = contacto;\r\n  // Se procesa el formulario\r\n  const enviarContacto = (e) => {\r\n    e.preventDefault();\r\n    // Validamos que no haya campos vacios por segunda vez\r\n    if (\r\n      nombre.trim() === \"\" ||\r\n      apellido.trim() === \"\" ||\r\n      email.trim() === \"\" ||\r\n      telefono.trim() === \"\"\r\n    ) {\r\n      swal({\r\n        title: \"¡Lo siento!\",\r\n        text: \"Uno o mas campos estan vacios.\",\r\n        icon: \"error\",\r\n        button: \"Corregir\",\r\n      });\r\n      actualizarError(true);\r\n      return;\r\n    }\r\n    actualizarError(false);\r\n    // Se comprueba si se esta agregando o editando un contacto\r\n    if (!editando) {\r\n      // Si se esta agregando un contacto\r\n      // Se genera el ID\r\n      const contactoTemporal = {...contacto, id: uuidv4()};\r\n      // Se envia el contacto al State principal\r\n      agregarContacto(contactoTemporal);\r\n    } else {\r\n      // Si se esta editando un contacto\r\n      editarContacto(contacto);\r\n      actualizarEditando(false);\r\n    }\r\n    // Se reincia el formulario\r\n    actualizarContacto({\r\n      nombre: '',\r\n      apellido: '',\r\n      email: '',\r\n      telefono: '',\r\n    });\r\n  };\r\n  // Escuchamos la variable contactoSeleccionado para cuando haya un cambio\r\n  useEffect(() => {\r\n    if (contactoSeleccionado.id) {\r\n      actualizarContacto(contactoSeleccionado);\r\n      actualizarEditando(true);\r\n    }\r\n  }, [contactoSeleccionado])\r\n\r\n  return (\r\n    <div className=\"card-panel\">\r\n      <h2>Agregar contacto</h2>\r\n      <form onSubmit={enviarContacto}>\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s12\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"nombre\"\r\n              name=\"nombre\"\r\n              required\r\n              onChange={actualizarState}\r\n              value={nombre}\r\n              placeholder=\"Nombre\"\r\n            />\r\n            <label htmlFor=\"nombre\">Nombre</label>\r\n          </div>\r\n          <div className=\"input-field col s12\">\r\n            <input\r\n              type=\"text\"\r\n              id=\"apellido\"\r\n              name=\"apellido\"\r\n              required\r\n              onChange={actualizarState}\r\n              value={apellido}\r\n              placeholder=\"Apellido\"\r\n            />\r\n            <label htmlFor=\"apellido\">Apellido</label>\r\n          </div>\r\n          <div className=\"input-field col s12\">\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              required\r\n              pattern=\"[A-Za-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$\"\r\n              onChange={actualizarState}\r\n              value={email}\r\n              placeholder=\"Correo electrónico\"\r\n            />\r\n            <label htmlFor=\"email\">Correo electrónico</label>\r\n            <span\r\n              className=\"helper-text\"\r\n              data-error=\"Esto no es un correo electrónico valido.\"\r\n            ></span>\r\n          </div>\r\n          <div className=\"input-field col s12\">\r\n            <input\r\n              type=\"tel\"\r\n              id=\"telefono\"\r\n              name=\"telefono\"\r\n              required\r\n              pattern=\"^([0-9])*$\"\r\n              minLength=\"8\"\r\n              maxLength=\"13\"\r\n              onChange={actualizarState}\r\n              value={telefono}\r\n              placeholder=\"Número telefónico\"\r\n            />\r\n            <label htmlFor=\"telefono\">Número telefónico</label>\r\n            <span\r\n              className=\"helper-text\"\r\n              data-error=\"Esto no es un número telefónico valido.\"\r\n            >\r\n              Número telefónico de entre 8 y 13 caracteres.\r\n            </span>\r\n          </div>\r\n          <div className=\"input-field col s12 right-align\">\r\n            <button type=\"submit\" className=\"waves-effect waves-light btn\">\r\n              { editando ? 'Editar' : 'Agregar' } <i className=\"material-icons right\">send</i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\n\r\nfunction Contacto({ contacto, eliminarContacto, seleccionarContacto }) {\r\n  // Creo el hook para el\r\n  return (\r\n    <li className=\"collection-item\">\r\n      <big>\r\n        <div>\r\n          <b>Nombre: </b>\r\n          {contacto.nombre} {contacto.apellido}\r\n        </div>\r\n      </big>\r\n      <div>\r\n        <b>Correo electrónico: </b>\r\n        {contacto.email}\r\n      </div>\r\n      <div>\r\n        <b>Número telefónico: </b>\r\n        {contacto.telefono}\r\n      </div>\r\n      <div className=\"row mb-0 mt-2\">\r\n        <div className=\"col s12 m6\">\r\n          <button type=\"button\" className=\"waves-effect waves-light btn blue\" onClick={() => seleccionarContacto(contacto.id)}>\r\n            Editar <i className=\"material-icons right\">edit</i>\r\n          </button>\r\n        </div>\r\n        <div className=\"col s12 m6 right-align\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"waves-effect waves-light  btn red\"\r\n            onClick={() => eliminarContacto(contacto.id)}\r\n          >\r\n            Eliminar <i className=\"material-icons right\">close</i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Contacto;\r\n","import React, { Fragment, useEffect, useState } from \"react\";\n\nimport Formulario, {  } from \"./components/Formulario\";\nimport Contacto, {  } from \"./components/Contacto\";\n\nfunction App() {\n  // Comprobamos las contactos del localstorage\n  let contactosStorage = JSON.parse(localStorage.getItem('contactos'));\n  if (!contactosStorage) {\n    // Si no hay contactos cremos el arreglo vacio\n    contactosStorage = []\n  }\n\n  // Creo el state que se encargara de almacenar los contactos\n  const [ contactos, actualizarContactos ] = useState(contactosStorage);\n  // Creo el state para seleccionar el contacto a editar\n  const [ contactoSeleccionado, actualizarContactoSeleccionado ] = useState({});\n  // Funion para agregar contacto\n  const agregarContacto = contacto => {\n    // Actualizamos el state con el hook\n    actualizarContactos([\n      ...contactos,\n      contacto\n    ]);\n  }\n  // Funcion para eliminar contacto\n  const eliminarContacto = id => {\n    actualizarContactos(contactos.filter(contacto => contacto.id !== id));\n  }\n  // Funcion que enviara la informacion del contacto que se va a esitar\n  const seleccionarContacto = id => {\n    // Agregamos al state las propiedades del contacto con el id seleccionado\n    actualizarContactoSeleccionado(contactos.filter(contacto => contacto.id === id)[0])\n  }\n  // Funcion que remplazara la informacion del cntcto correspondiente de la lista\n  const editarContacto = contactoeditado => {\n    let contactosAntes = [];\n    contactos.map(contacto => {\n      if (contacto.id === contactoeditado.id) {\n        contacto = contactoeditado;\n      }\n      contactosAntes.push(contacto);\n    });\n    actualizarContactos(contactosAntes);\n    actualizarContactoSeleccionado({});\n  }\n\n  // Escchamos el cambio en el state contactos\n  useEffect(() => {\n    let contactosStorage = JSON.parse(localStorage.getItem('contactos'));\n    if (contactosStorage) {\n      localStorage.setItem('contactos', JSON.stringify(contactos))\n    } else {\n      localStorage.setItem('contactos', JSON.stringify([]))\n    }\n  }, [contactos]);\n\n  return (\n    <Fragment>\n      <h1 className=\"center-align\">Agenda</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col s12 m6\">\n            <Formulario\n              agregarContacto={agregarContacto}\n              contactoSeleccionado={contactoSeleccionado}\n              editarContacto={editarContacto}\n            />\n          </div>\n          <div className=\"col s12 m6\">\n            <div className=\"card-panel\">\n              <h2>{ contactos.length ? 'Lista de contactos' : 'No hay ningún contacto'}</h2>\n              <ul className=\"collection\">\n                {\n                  contactos.map(contacto => (\n                    <Contacto\n                      key={contacto.id}\n                      contacto={contacto}\n                      eliminarContacto={eliminarContacto}\n                      seleccionarContacto={seleccionarContacto}\n                    />\n                  ))\n                }\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}